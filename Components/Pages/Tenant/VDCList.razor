@page "/tenant/vdcs"
@layout Layout.A_SideBarLayout
@using Paslauga.Helpers
@using Paslauga.Entities
@inject ApiService ApiService

@if (isLoading)
{
    <p>Loading...</p>
}
else if (vdcs == null || !vdcs.Any())
{
    <p>No VDCs available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Organisation</th>
                <th>Resources</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vdc in vdcs)
            {
                <tr>
                    <td>@vdc.Id</td>
                    <td>@vdc.Name</td>
                    <td>@OrganisationNames.GetValueOrDefault(vdc.OrganisationId, "NoN")</td>
                    <td>
                        CPU: @vdc.VCPUAllocated / @vdc.VCPUMax<br />
                        RAM: @vdc.VMemoryAllocated / @vdc.VMemoryMax GB<br />
                        Storage: @vdc.VStorageUsed / @vdc.VStorageMax GB
                    </td>
                    <td><a class="btn btn-primary" href="#">Manage vDC</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<VDC> vdcs = new();
    private bool isLoading = true;
    private Dictionary<int?, string> OrganisationNames = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            vdcs = await ApiService.GetAsyncList<VDC>("list/vdcs");

            var organisationIds = vdcs.Select(vdc => vdc.OrganisationId).Distinct().ToList();
            foreach (var orgId in organisationIds)
            {
                var organisation = await ApiService.GetAsync<Organisation>($"find/organisation/{orgId}");
                if (organisation != null)
                {
                    OrganisationNames[orgId] = organisation.Name;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching VDCs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}